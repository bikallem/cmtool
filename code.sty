%% Latex macros for code
%% Based on a macro file that had the following acknowledgements:
%% % Latex Macros for Lisp code in text.
%% % Based on macros found in C. Rich's library.
%% % JAR hacks, 18 April 88:
%% %  -- Put code in small font
%% % RWH: update for LaTeX2e: June, 1996
%% Also "Olin" appeared in various comments
%%
%% Modified to make just about every symbol work,
%% to make blank lines work, and to do some clean up.

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{code}

\makeatletter

% \vobeyspaces turns all spaces into non-breakable spaces.
% Note: this is like \@vobeyspaces except without spurious space in defn.

{\catcode`\ =\active\gdef\vobeyspaces{\catcode`\ =\active\let =\@xobeysp}}

% \def\vobeytabs turns all tabs into 8 non-breakable spaces

{\catcode`\^^I=\active\gdef\vobeytabs{\catcode`\^^I=\active\let^^I=\xvobeytabs}}

\def\xvobeytabs{\@xobeysp\@xobeysp\@xobeysp\@xobeysp\@xobeysp\@xobeysp\@xobeysp\@xobeysp}

% \vobeylines turns all cr's into non-breakable \par's

{\catcode`\^^M=\active\gdef\vobeylines{\catcode`\^^M=\active\let^^M=\xvobeylines}}

\def\xvobeylines{\par\penalty10000\mbox{}}

% \vobeylines turns all cr's into breakable \par's

{\catcode`\^^M=\active\gdef\vobeylinesbig{\catcode`\^^M=\active\let^^M=\xvobeylinesbig}}

\def\xvobeylinesbig{\par\mbox{}}

% \obeycrsp turns cr's into non-breakable spaces

{\catcode`\^^M=\active\gdef\obeycrsp{\catcode`\^^M=\active\let^^M=\@xobeysp}}

%% \@noligs prevents ?` and !` from being treated as ligatures

\begingroup
\catcode``=13
\gdef\@noligs{\def`{{}\char"60}}
\endgroup

%% Set up code environment, in which characters appearing
%% in code are treated verbatim

\def\setupcode{\parsep=0pt\parindent=0pt%\puny%
  \ttfamily\frenchspacing\catcode``=13\@noligs%
  \catcode`\$=12%
  \catcode`\&=12%
  \catcode`\#=12%
  \catcode`\^=12%
  \catcode`\_=12%
  \catcode`\~=12%
  \catcode`\%=12%
  \def\\{\char`\\}%
  \def\{{\char`\{}%
  \def\}{\char`\}}%
  \vobeytabs\vobeyspaces\vobeylines}

\def\obeybraces{%
  \catcode`\\=12%
  \catcode`\{=12%
  \catcode`\}=12%
}


% Code environment as described above.  Code is
% indented by the same amount as quotes.
% Note: to increase left margin, use \leftmargini=1in.

\newenvironment{bigcode}%
  {\list{}{\parsep=0pt\leftmargin=0pt\labelwidth=0pt\itemindent=0pt%
\listparindent=0pt}\item[]\setupcode\vobeylinesbig}%
  {\endlist}

\newenvironment{bigstrictcode}%
  {\list{}{\parsep=0pt\leftmargin=0pt\labelwidth=0pt\itemindent=0pt%
\listparindent=0pt}\item[]\setupcode\vobeylinesbig\obeybraces}%
  {\endlist}

% Code is just like bigcode, but everything inside is kept on one page
% Note: This actually works by setting a huge penalty for breaking
% between lines of code.

\newenvironment{code}%
  {\list{}{\parsep=0pt\labelwidth=0pt\itemindent=0pt
\listparindent=0pt}\item[]\setupcode\vobeylines}%
  {\endlist}

\newenvironment{strictcode}%
  {\list{}{\parsep=0pt\labelwidth=0pt\itemindent=0pt%\leftmargin=0pt%
\listparindent=0pt}\item[]\setupcode\vobeylines\obeybraces}%
  {\endlist}

% \cd is used to build a code environment in the middle of text.
% Note: only difference from display code is that cr's are taken
% as unbreakable spaces instead of \par's.

\def\cd{\begingroup\setupcode\obeycrsp\startcode}
\def\startcode#1{#1\endgroup}

%% Use control- \ [ and ] to get backslash and braces in strictcode mode

\catcode`\=0
\catcode`\=1
\catcode`\=2


\makeatother
